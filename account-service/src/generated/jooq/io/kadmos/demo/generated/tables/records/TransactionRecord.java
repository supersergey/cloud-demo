/*
 * This file is generated by jOOQ.
 */
package io.kadmos.demo.generated.tables.records;


import io.kadmos.demo.generated.tables.Transaction;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionRecord extends UpdatableRecordImpl<TransactionRecord> implements Record5<Long, UUID, OffsetDateTime, BigDecimal, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>main.transaction.id</code>.
     */
    public TransactionRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>main.transaction.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>main.transaction.account_id</code>.
     */
    public TransactionRecord setAccountId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>main.transaction.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>main.transaction.created_at</code>.
     */
    public TransactionRecord setCreatedAt(OffsetDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>main.transaction.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>main.transaction.opening_balance</code>.
     */
    public TransactionRecord setOpeningBalance(BigDecimal value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>main.transaction.opening_balance</code>.
     */
    public BigDecimal getOpeningBalance() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>main.transaction.amount</code>.
     */
    public TransactionRecord setAmount(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>main.transaction.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, UUID, OffsetDateTime, BigDecimal, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, UUID, OffsetDateTime, BigDecimal, BigDecimal> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Transaction.TRANSACTION.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Transaction.TRANSACTION.ACCOUNT_ID;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Transaction.TRANSACTION.CREATED_AT;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Transaction.TRANSACTION.OPENING_BALANCE;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Transaction.TRANSACTION.AMOUNT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getAccountId();
    }

    @Override
    public OffsetDateTime component3() {
        return getCreatedAt();
    }

    @Override
    public BigDecimal component4() {
        return getOpeningBalance();
    }

    @Override
    public BigDecimal component5() {
        return getAmount();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getAccountId();
    }

    @Override
    public OffsetDateTime value3() {
        return getCreatedAt();
    }

    @Override
    public BigDecimal value4() {
        return getOpeningBalance();
    }

    @Override
    public BigDecimal value5() {
        return getAmount();
    }

    @Override
    public TransactionRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TransactionRecord value2(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public TransactionRecord value3(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public TransactionRecord value4(BigDecimal value) {
        setOpeningBalance(value);
        return this;
    }

    @Override
    public TransactionRecord value5(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionRecord values(Long value1, UUID value2, OffsetDateTime value3, BigDecimal value4, BigDecimal value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionRecord
     */
    public TransactionRecord() {
        super(Transaction.TRANSACTION);
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(Long id, UUID accountId, OffsetDateTime createdAt, BigDecimal openingBalance, BigDecimal amount) {
        super(Transaction.TRANSACTION);

        setId(id);
        setAccountId(accountId);
        setCreatedAt(createdAt);
        setOpeningBalance(openingBalance);
        setAmount(amount);
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(io.kadmos.demo.generated.tables.pojos.Transaction value) {
        super(Transaction.TRANSACTION);

        if (value != null) {
            setId(value.getId());
            setAccountId(value.getAccountId());
            setCreatedAt(value.getCreatedAt());
            setOpeningBalance(value.getOpeningBalance());
            setAmount(value.getAmount());
        }
    }
}
